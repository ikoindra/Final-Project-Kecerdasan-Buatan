# Part of speech recognition with POS Tags using NLP

import nltk
from nltk.tokenize import word_tokenize, sent_tokenize
from nltk.tag import pos_tag
from nltk.chunk import ne_chunk
from nltk.corpus import stopwords

# Get input from the user
user_input = input("Part of speech recognition with POS Tags using NLP\nPlease enter a sentence or a paragraph (Kalimat dalam bahasa inggris): ")

# Sentence tokenization
sentences = sent_tokenize(user_input)
print("\nSentences:", sentences)

# Word tokenization
words = word_tokenize(user_input)
print("\nWords:", words)

# Part-of-speech tagging
pos_tags = pos_tag(words)
print("\nPOS Tags:", pos_tags)

# Named entity recognition
named_entities = ne_chunk(pos_tags)
print("\nNamed Entities:", named_entities)

# Stopwords removal
stop_words = set(stopwords.words('english'))
filtered_words = [word for word in words if word.lower() not in stop_words]
print("\nFiltered Words:", filtered_words)

# Detailed POS tags explanation
pos_explanation = {
    'NNP': 'Proper Noun, Singular',
    'NNPS': 'Proper Noun, Plural',
    'NN': 'Noun, Singular',
    'NNS': 'Noun, Plural',
    'VB': 'Verb, Base Form',
    'VBD': 'Verb, Past Tense',
    'VBG': 'Verb, Gerund or Present Participle',
    'VBN': 'Verb, Past Participle',
    'VBP': 'Verb, Non-3rd Person Singular Present',
    'VBZ': 'Verb, 3rd Person Singular Present',
    'JJ': 'Adjective',
    'JJR': 'Adjective, Comparative',
    'JJS': 'Adjective, Superlative',
    'RB': 'Adverb',
    'RBR': 'Adverb, Comparative',
    'RBS': 'Adverb, Superlative',
    'IN': 'Preposition or Subordinating Conjunction',
    'DT': 'Determiner',
    'CC': 'Coordinating Conjunction',
    'CD': 'Cardinal Number',
    'PRP': 'Personal Pronoun',
    'PRP$': 'Possessive Pronoun',
    'MD': 'Modal',
    'TO': 'To'
}

print("\nDetailed POS Tags Explanation:")
for word, tag in pos_tags:
    if tag in pos_explanation:
        print(f"{pos_explanation[tag]} ({tag}): {word}")
