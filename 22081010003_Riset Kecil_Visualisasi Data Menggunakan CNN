import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
import matplotlib.pyplot as plt

# Membaca dataset dari file CSV
data = pd.read_csv('C:/Coding/nyoba/dataset.csv')

# Menampilkan semua data untuk memastikan data terbaca dengan benar
print(data)

# Menghapus kolom '_id' karena tidak dibutuhkan untuk analisis
data = data.drop(columns=['_id'])

# Mengatur 'Kecamatan' sebagai index
data.set_index('Kecamatan', inplace=True)

# Membuat heatmap
plt.figure(figsize=(12, 8))
sns.heatmap(data, annot=True, cmap='coolwarm', cbar=True)
plt.title('Heatmap Distribusi Penyakit di Setiap Kecamatan')
plt.xlabel('Jenis Penyakit')
plt.ylabel('Kecamatan')
plt.show()

# Konversi data heatmap menjadi numpy array
heatmap_array = data.values

# Reshape heatmap array to fit into Conv2D (assuming single channel)
X = heatmap_array.reshape((1, heatmap_array.shape[0], heatmap_array.shape[1], 1))

# Buat label dummy untuk contoh ini (sesuaikan dengan data yang ada)
y = np.array([1])  # Ini hanya contoh, dalam prakteknya, Anda akan memiliki dataset yang lebih besar dengan label yang sesuai

# Model CNN
model = Sequential()
model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(heatmap_array.shape[0], heatmap_array.shape[1], 1)))
model.add(MaxPooling2D((2, 2)))
model.add(Flatten())
model.add(Dense(64, activation='relu'))
model.add(Dense(1, activation='sigmoid'))  # Ubah menjadi softmax jika multi-class

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])  # Ubah loss jika multi-class

# Fit model (dalam contoh ini hanya satu data, dalam prakteknya gunakan dataset yang lebih besar)
history = model.fit(X, y, epochs=10, batch_size=1, verbose=1)

# Plot training loss
plt.plot(history.history['loss'], label='Training Loss')
plt.title('Training Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.show()

# Plot training accuracy
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.title('Training Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()
plt.show()
